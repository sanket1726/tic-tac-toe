{"version":3,"sources":["components/Icon.js","components/Buttons.js","App.js","index.js"],"names":["Icon","name","useEffect","console","log","className","color","memo","Buttons","purpose","message","onClickFunction","useState","styleClassName","setStyleClassName","style","fontWeight","Button","block","onClick","itemArray","Array","fill","App","isCross","setIsCross","winMessage","setWinMessage","reloadGame","changeItem","itemNumber","toast","toUpperCase","type","Container","position","Row","Col","md","includes","map","item","index","Card","CardBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb960abe.chunk.js","sourcesContent":["import React, { useEffect, memo } from 'react'\r\nimport { FaTimes, FaPen, FaRegCircle } from 'react-icons/fa'\r\n\r\nconst Icon = ({ name }) => {\r\n\r\n    useEffect(() => {\r\n        console.log('Icon Comp')\r\n    }, [name])\r\n    switch (name) {\r\n        case 'circle':\r\n            return <FaRegCircle className=\"icons\" color=\"green\" />\r\n\r\n        case 'cross':\r\n            return <FaTimes className=\"icons\" color=\"red\" />\r\n\r\n        default:\r\n            return <FaPen className=\"icons\" />\r\n    }\r\n}\r\n\r\nexport default memo(Icon);","import React, { memo, useEffect, useState } from 'react'\r\nimport { Button } from 'reactstrap'\r\nconst Buttons = ({ purpose, message, onClickFunction }) => {\r\n    const [styleClassName, setStyleClassName] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        purpose === \"won\" ? setStyleClassName(\"text-uppercase text-center text-success\") : setStyleClassName(\"text-uppercase text-center text-danger\")\r\n    }, [purpose])\r\n\r\n    return (\r\n        <div className=\"mb-2 mt-2\">\r\n            <h1 className={`${styleClassName}`} style={{ fontWeight: \"bold\", color: \"#6EC72D\" }}>{`${message}`}</h1>\r\n            <Button\r\n                block\r\n                className=\"button\"\r\n                color=\"success\"\r\n                onClick={onClickFunction}\r\n            >Reload The Game</Button>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default memo(Buttons);","import React, { useState } from 'react'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { Card, CardBody, Container, Col, Row } from 'reactstrap'\nimport Icon from \"./components/Icon\"\nimport Buttons from './components/Buttons'\n\nconst itemArray = new Array(9).fill(\"empty\");\nconst App = () => {\n\n  const [isCross, setIsCross] = useState(false)\n  // for showing winner\n  const [winMessage, setWinMessage] = useState(\"\")\n\n\n\n  // responsible for reloading the game\n  const reloadGame = () => {\n    // set all of the states back to original\n    setIsCross(false);\n    setWinMessage(\"\");\n    itemArray.fill(\"empty\", 0, 9);\n  }\n\n  // To check winner state\n  const checkIsWinner = () => {\n    // \n    if ((itemArray[0] !== \"empty\" && itemArray[0] === itemArray[1]) && (itemArray[1] === itemArray[2])) {\n      setWinMessage(itemArray[0])\n    } else if ((itemArray[0] !== \"empty\" && itemArray[0] === itemArray[3]) && (itemArray[3] === itemArray[6])) {\n      setWinMessage(itemArray[0])\n    } else if ((itemArray[0] !== \"empty\" && itemArray[0] === itemArray[4]) && (itemArray[4] === itemArray[8])) {\n      setWinMessage(itemArray[0])\n    } else if ((itemArray[1] !== \"empty\" && itemArray[1] === itemArray[4]) && (itemArray[4] === itemArray[7])) {\n      setWinMessage(itemArray[1])\n    } else if ((itemArray[2] !== \"empty\" && itemArray[2] === itemArray[5]) && (itemArray[5] === itemArray[8])) {\n      setWinMessage(itemArray[2])\n    } else if ((itemArray[2] !== \"empty\" && itemArray[2] === itemArray[4]) && (itemArray[4] === itemArray[6])) {\n      setWinMessage(itemArray[2])\n    } else if ((itemArray[3] !== \"empty\" && itemArray[3] === itemArray[4]) && (itemArray[4] === itemArray[5])) {\n      setWinMessage(itemArray[3])\n    } else if ((itemArray[6] !== \"empty\" && itemArray[6] === itemArray[7]) && (itemArray[7] === itemArray[8])) {\n      setWinMessage(itemArray[6])\n    }\n  }\n\n  // Responsible for changing Item\n  const changeItem = (itemNumber) => {\n    // \n    if (winMessage) {\n      return toast(`${winMessage.toUpperCase()} already won`, { type: \"success\" })\n    }\n\n    if (itemArray[itemNumber] === \"empty\") {\n      itemArray[itemNumber] = isCross ? \"cross\" : \"circle\"\n      setIsCross(!isCross);\n    } else {\n      return toast(\"Already Checked\", { type: \"error\" })\n    }\n\n    checkIsWinner();\n  }\n\n  return (\n    <Container className=\"p-5\">\n      <ToastContainer position=\"top-right\" />\n      <Row>\n        <Col md={6} className=\"offset-md-3\">\n          {winMessage ? (\n            <Buttons\n              purpose=\"won\"\n              message={`${winMessage} won`}\n              onClickFunction={() => {\n                reloadGame();\n              }} />\n          ) : (!itemArray.includes(\"empty\") && winMessage === \"\") ? (\n            <Buttons\n              purpose=\"draw\"\n              message=\"Oops No one Won!!\"\n              onClickFunction={() => {\n                reloadGame();\n              }} />\n          ) : (\n            <h1 className=\"text-center text-warning\">{isCross ? \"Cross Turn\" : \"Circle Turn\"}</h1>\n          )}\n          <div className=\"grid\">\n            {itemArray.map((item, index) => {\n              console.log(item + index)\n              return (\n                <Card className=\"card\"\n                  key={`${index}${item}`}\n                  onClick={() => {\n                    changeItem(index)\n                  }}\n                >\n                  <CardBody className=\"box\">\n                    <Icon name={item} />\n                  </CardBody>\n                </Card>\n              )\n            })}\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}